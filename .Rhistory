library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
#reading all einzelteile, komponente and fahrzeuge, and bestandteile tabelle that relates them
T_05_dirty <- read_csv("Einzelteil_T05.csv")
T_06_dirty <- read_csv("Einzelteil_T06.csv")
Typ11_fzg_dirty <- read.csv("Fahrzeuge_OEM1_Typ11.csv")
K1DI1_komponente_dirty <- read.csv("Komponente_K1DI1.csv")
Bestandteile_typ11_fzg_dirty <- read.csv("Bestandteile_Fahrzeuge_OEM1_Typ11.csv")
Bestandteile_K1DI1_komponente <- read.csv("Bestandteile_Komponente_K1DI1.csv")
#Tidying each data table
#separate the one column into right columns with right names to relate to other tables
Bestandteile_typ11_fzg_clean <- Bestandteile_typ11_fzg_dirty %>%
separate("X.ID_Karosserie.ID_Schaltung.ID_Sitze.ID_Motor.ID_Fahrzeug", c("X", "ID_Karoserie", "Schaltung", "Sitze", "ID_Motor", "ID_Fahrzeug"), sep = ";")
Bestandteile_K1DI1_komponente_clean <- Bestandteile_K1DI1_komponente %>%
separate("X.ID_T1.ID_T2.ID_T5.ID_T6.ID_K1DI1", c("X", "ID_T01","ID_T02","ID_T05","ID_T06","ID_Motor"), sep = ";")
#renaming columns to fit all, selecting all K1DI1 Motoren
T_05_clean <- T_05_dirty %>%
rename("ID_T05" = "ID_T05.x")
#relate all K1DI1 Motoren to Fahrzeuge (for ID Fahrzeuge(in fzg)) but fzg select first right ones
#change typeof to date
Typ11_fzg_dirty$Produktionsdatum <- ymd(Typ11_fzg_dirty$Produktionsdatum)
Typ11_fzg_clean <- Typ11_fzg_dirty %>%
filter(Produktionsdatum >= as.Date("2010-09-21") & Produktionsdatum < as.Date("2012-09-04")) %>%
filter(Fehlerhaft == 1)
Bestandteile_typ11_fzg_clean_K1D1 <- Bestandteile_typ11_fzg_clean %>%
filter(str_detect(ID_Motor, pattern = "K1DI1-"))
#merging bestandteile fzg clean with typ11fzg clean to get only with K1DI1 Motoren (no match)
K1DI1_fzg <- merge(x = Bestandteile_typ11_fzg_clean_K1D1, y = Typ11_fzg_clean, by = "ID_Fahrzeug")
#K1DI1 to relate to Einzeilteile
#take from bestandfzg (nur ausgefallene fzg und dazugehörige motoren) und innerjoin with bestandteile komp
komp_fzg <- merge(Bestandteile_K1DI1_komponente_clean, Bestandteile_typ11_fzg_clean_K1D1, by = "ID_Motor")
komp_fzg <- komp_fzg %>% select(c(ID_Motor, ID_T05:ID_T06, ID_Fahrzeug))
#gives einzelteile with right motoren and then have to merge those einzelteile with fehlerhaften einzelteile
T_05_fehler <- T_05_clean %>%
filter(Produktionsdatum.x >= as.Date("2010-09-21") & Produktionsdatum.x < as.Date("2012-09-04")) %>%
filter(Fehlerhaft.x == 1) %>%
select(c(ID_T05, Produktionsdatum.x, Fehlerhaft.x))
T_06_fehler <- T_06_dirty %>%
filter(Fehlerhaft == 1) %>%
select(c(ID_T06, Fehlerhaft))
#merging T_05 does not work, dont need maybe cause its part of komponent
komp_fzg_einzeil <- merge(komp_fzg, T_06_fehler, by = "ID_T06")
getwd()
library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
setwd("C:/Users/abhis/Documents/R/Case Study")
#reading all einzelteile, komponente and fahrzeuge, and bestandteile tabelle that relates them
T_05_dirty <- read_csv("Einzelteil_T05.csv")
T_06_dirty <- read_csv("Einzelteil_T06.csv")
Typ11_fzg_dirty <- read.csv("Fahrzeuge_OEM1_Typ11.csv")
K1DI1_komponente_dirty <- read.csv("Komponente_K1DI1.csv")
Bestandteile_typ11_fzg_dirty <- read.csv("Bestandteile_Fahrzeuge_OEM1_Typ11.csv")
Bestandteile_K1DI1_komponente <- read.csv("Bestandteile_Komponente_K1DI1.csv")
#Tidying each data table
#separate the one column into right columns with right names to relate to other tables
Bestandteile_typ11_fzg_clean <- Bestandteile_typ11_fzg_dirty %>%
separate("X.ID_Karosserie.ID_Schaltung.ID_Sitze.ID_Motor.ID_Fahrzeug", c("X", "ID_Karoserie", "Schaltung", "Sitze", "ID_Motor", "ID_Fahrzeug"), sep = ";")
Bestandteile_K1DI1_komponente_clean <- Bestandteile_K1DI1_komponente %>%
separate("X.ID_T1.ID_T2.ID_T5.ID_T6.ID_K1DI1", c("X", "ID_T01","ID_T02","ID_T05","ID_T06","ID_Motor"), sep = ";")
#renaming columns to fit all, selecting all K1DI1 Motoren
T_05_clean <- T_05_dirty %>%
rename("ID_T05" = "ID_T05.x")
#relate all K1DI1 Motoren to Fahrzeuge (for ID Fahrzeuge(in fzg)) but fzg select first right ones
#change typeof to date
Typ11_fzg_dirty$Produktionsdatum <- ymd(Typ11_fzg_dirty$Produktionsdatum)
Typ11_fzg_clean <- Typ11_fzg_dirty %>%
filter(Produktionsdatum >= as.Date("2010-09-21") & Produktionsdatum < as.Date("2012-09-04")) %>%
filter(Fehlerhaft == 1)
Bestandteile_typ11_fzg_clean_K1D1 <- Bestandteile_typ11_fzg_clean %>%
filter(str_detect(ID_Motor, pattern = "K1DI1-"))
#merging bestandteile fzg clean with typ11fzg clean to get only with K1DI1 Motoren (no match)
K1DI1_fzg <- merge(x = Bestandteile_typ11_fzg_clean_K1D1, y = Typ11_fzg_clean, by = "ID_Fahrzeug")
#K1DI1 to relate to Einzeilteile
#take from bestandfzg (nur ausgefallene fzg und dazugehörige motoren) und innerjoin with bestandteile komp
komp_fzg <- merge(Bestandteile_K1DI1_komponente_clean, Bestandteile_typ11_fzg_clean_K1D1, by = "ID_Motor")
komp_fzg <- komp_fzg %>% select(c(ID_Motor, ID_T05:ID_T06, ID_Fahrzeug))
#gives einzelteile with right motoren and then have to merge those einzelteile with fehlerhaften einzelteile
T_05_fehler <- T_05_clean %>%
filter(Produktionsdatum.x >= as.Date("2010-09-21") & Produktionsdatum.x < as.Date("2012-09-04")) %>%
filter(Fehlerhaft.x == 1) %>%
select(c(ID_T05, Produktionsdatum.x, Fehlerhaft.x))
T_06_fehler <- T_06_dirty %>%
filter(Fehlerhaft == 1) %>%
select(c(ID_T06, Fehlerhaft))
#merging T_05 does not work, dont need maybe cause its part of komponent
komp_fzg_einzeil <- merge(komp_fzg, T_06_fehler, by = "ID_T06")
write.csv(komp_fzg_einzeil, file = "FehlerFahrzeugeT05T06")
write.csv(komp_fzg_einzeil, file = "FehlerFahrzeugeT05T06.csv")
komp_fzg_einzeil <- read.csv("FehlerFahrzeugeT05T06.csv")
Geodaten <- read_csv("Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv")
View(Geodaten)
Zulassungen <- read_csv("Zulassungen_alle_Fahrzeuge.csv")
View(Zulassungen)
Zulassungen <- read_csv2("Zulassungen_alle_Fahrzeuge.csv")
View(Zulassungen)
Geodaten <- read_csv2("Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv")
Geodaten_selection <- Geodaten %>%
select(Gemeinde == "DRESDEN")
Geodaten_selection <- Geodaten %>%
filter(Gemeinde == "DRESDEN")
View(Geodaten_selection)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDEN")
View(Zulassungen_selection)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDEN") %>%
rename("ID_Fahrzeug" = "IDNummer" )
View(komp_fzg_einzeil)
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug")
View(Zul_fzg)
Zul_fzg <- merge(Zulassungen_selection, komp_fzg_einzeil, by = "ID_Fahrzeug")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug")
#sollte zulassungsdatum auch considered werden?
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
View(Zulassungen)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDEN") %>%
rename("ID_Fahrzeug" = "IDNummer" ) %>%
filter(Zulassung >= as.Date("2010-09-21") & Zulassung <= as.Date("2012-09-04"))
View(Zulassungen_selection)
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug")
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDEN") %>%
rename("ID_Fahrzeug" = "IDNummer")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %<%
select(-c(X, X1))
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
Geodaten_selection <- Geodaten %>%
filter(Gemeinde == "STUTTGART")
#sollte zulassungsdatum auch considered werden? nein sonst zul_fzg merge geht nicht
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "STUTTGART") %>%
rename("ID_Fahrzeug" = "IDNummer")
#not sure if appropriate, aber these were zugelassen in Dresden obwohl Fehler
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
View(Zulassungen)
View(Zulassungen_selection)
unique(Geodaten$Gemeinde)
unique(Geodaten$Gemeinde) == "STUTTGART"
any(unique(Geodaten$Gemeinde)) == "STUTTGART"
any(unique(Geodaten$Gemeinde) == "STUTTGART")
any(unique(Zulassungen$Gemeinden) == "Stuttgart")
any(unique(Geodaten$Gemeinde) == "Stuttgart")
install.packages(c("leaflet", "leaflet.extras"))
library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
komp_fzg_einzeil <- read.csv("FehlerFahrzeugeT05T06.csv")
Geodaten <- read_csv2("Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv")
Zulassungen <- read_csv2("Zulassungen_alle_Fahrzeuge.csv")
Geodaten_selection <- Geodaten %>%
filter(Gemeinde == "DRESDEN")
#sollte zulassungsdatum auch considered werden? nein sonst zul_fzg merge geht nicht
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "STUTTGART") %>%
rename("ID_Fahrzeug" = "DRESDEN")
#not sure if appropriate, aber these were zugelassen in Dresden obwohl Fehler
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
setwd("C:/Users/abhis/Documents/R/Case Study")
komp_fzg_einzeil <- read.csv("FehlerFahrzeugeT05T06.csv")
Geodaten <- read_csv2("Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv")
Zulassungen <- read_csv2("Zulassungen_alle_Fahrzeuge.csv")
Geodaten_selection <- Geodaten %>%
filter(Gemeinde == "DRESDEN")
#sollte zulassungsdatum auch considered werden? nein sonst zul_fzg merge geht nicht
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "STUTTGART") %>%
rename("ID_Fahrzeug" = "DRESDEN")
#not sure if appropriate, aber these were zugelassen in Dresden obwohl Fehler
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDE") %>%
rename("ID_Fahrzeug" = "IDNummer")
View(Zulassungen_selection)
Zulassungen_selection <- Zulassungen %>%
filter(Gemeinden == "DRESDEN") %>%
rename("ID_Fahrzeug" = "IDNummer")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
View(Zulassungen_selection)
View(K1DI1_fzg)
View(Geodaten_selection)
Zulassungen_selection$Breitengrad <- gsub(".{1}$","",Zulassungen_selection$Breitengrad)
Zulassungen_selection$Breitengrad <- as.numeric(gsub(",",".",Zulassungen_selection$Breitengrad))
colnames(Zulassungen_selection)
Geodaten_selection$Breitengrad <- gsub(".{1}$","",Geodaten_selection$Breitengrad)
Geodaten_selection$Breitengrad <- as.numeric(gsub(",",".",Geodaten_selection$Breitengrad))
View(Zul_fzg)
Zulassungen_selection <- Zulassungen %>%
rename("ID_Fahrzeug" = "IDNummer")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
Zulassungen_selection <- Zulassungen %>%
rename("ID_Fahrzeug" = "IDNummer") %>%
rename("Gemeinden" = "Gemeinde")
View(Zulassungen)
Zulassungen_selection <- Zulassungen %>%
rename("ID_Fahrzeug" = "IDNummer") %>%
rename("Gemeinde" = "Gemeinden")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1))
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1)) %>%
merge(Geodaten, by = "Gemeinde")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1)) %>%
merge(Geodaten, by = "Gemeinde") %>%
select(-c(X, X1))
# function to calculate distance between stuttgart and datapoint
calc_distance <- function(df){
distance <- rep(0, nrow(df))
# lat/lng stuttgart
lat_st = 48.7706 * pi / 180
lng_st = 9.18457 * pi / 180
R_earth = 6371 # radius earth [km]
# calc distance between stuttgart - point
# after haversine distance algorithm
for (i in 1:nrow(df)) {
lng1 <- df$Laengengrad[i] * pi / 180
lat1 <- df$Breitengrad[i] * pi / 180
delta_lng <- (lng_st - lng1)
delta_lat <- (lat_st - lat1)
var_a <- sin(delta_lat/2) * sin(delta_lat/2) + cos(lat_st) * cos(lat1) * sin(delta_lng/2) * sin(delta_lng/2)
var_c <- 2 * atan2(sqrt(var_a), sqrt(1 - var_a))
var_d <- R_earth * var_c # [km]
distance[i] <- round(var_d, digits = 2)
}
df <- cbind(df,distance)
return(df)
}
filtered_data <- calc_distance(Zul_fzg)
data_geo <- calc_distance(Geodaten)
# count occurences in each gemeinde
col_matches <- rep(0, nrow(data_geo))
for (i in 1:nrow(data_geo)) {
col_matches[i] <- sum(filtered_data$Gemeinde == data_geo$Gemeinde[i])
col_matches[i][col_matches[i] == 0] <- NA
}
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) # remove rows with 0 matches since they should not appear on the map
View(filtered_data)
View(data_geo)
write.csv(filtered_data, file = "filtered_data.csv", na = "")
# saves cleaned file gemeinde
write.csv(data_geo, file = "gemeinden_clean.csv", na = "")
setwd("C:/Users/abhis/Documents/R/Case Study")
library(leaflet)
library(dplyr)
library(ggplot2)
library(leaflet.extras)
library(DT)
setwd("C:/Users/abhis/Documents/R/Case Study")
library(shiny); runApp('Case Study Gaman/IDA_grp_10/shiny_app.R')
View(data_geo)
data_geo <- data_geo %>%
select(-X1)
runApp('Case Study Gaman/IDA_grp_10/shiny_app.R')
runApp('Case Study Gaman/IDA_grp_10/shiny_app.R')
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) %>% # remove rows with 0 matches since they should not appear on the map
select(-X1)
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) %>% # remove rows with 0 matches since they should not appear on the map
select(-X1)
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) # remove rows with 0 matches since they should not appear on the map
View(data_geo)
ds <- read.csv("filtered_data.csv")
data_geo <- read.csv("gemeinden_clean.csv")
names(data_geo)[6] <- "Distanz"
names(data_geo)[7] <- "Anz_Fahrzeuge"
names(data_geo) <- c("No", "PLZ", "Gemeinde", "Laengengrad", "Breitengrad", "Distanz", "Anz_Fahrzeuge")
View(data_geo)
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) %>% # remove rows with 0 matches since they should not appear on the map
select(-X1)
View(Geodaten_selection)
View(Geodaten)
Geodaten$Breitengrad <- gsub(".{1}$","",Geodaten$Breitengrad)
Geodaten$Breitengrad <- as.numeric(gsub(",",".",Geodaten$Breitengrad))
#sollte zulassungsdatum auch considered werden? nein sonst zul_fzg merge geht nicht
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
#dresden important?
Zulassungen_selection <- Zulassungen %>%
rename("ID_Fahrzeug" = "IDNummer") %>%
rename("Gemeinde" = "Gemeinden")
Geodaten_selection$Breitengrad <- gsub(".{1}$","",Geodaten_selection$Breitengrad)
Geodaten_selection$Breitengrad <- as.numeric(gsub(",",".",Geodaten_selection$Breitengrad))
#not sure if appropriate, aber these were zugelassen in Dresden obwohl Fehler
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1)) %>%
merge(Geodaten, by = "Gemeinde") %>%
select(-c(X, X1))
# function to calculate distance between stuttgart and datapoint
calc_distance <- function(df){
distance <- rep(0, nrow(df))
# lat/lng stuttgart
lat_st = 48.7706 * pi / 180
lng_st = 9.18457 * pi / 180
R_earth = 6371 # radius earth [km]
# calc distance between stuttgart - point
# after haversine distance algorithm
for (i in 1:nrow(df)) {
lng1 <- df$Laengengrad[i] * pi / 180
lat1 <- df$Breitengrad[i] * pi / 180
delta_lng <- (lng_st - lng1)
delta_lat <- (lat_st - lat1)
var_a <- sin(delta_lat/2) * sin(delta_lat/2) + cos(lat_st) * cos(lat1) * sin(delta_lng/2) * sin(delta_lng/2)
var_c <- 2 * atan2(sqrt(var_a), sqrt(1 - var_a))
var_d <- R_earth * var_c # [km]
distance[i] <- round(var_d, digits = 2)
}
df <- cbind(df,distance)
return(df)
}
#method for filtered data and geo data.
filtered_data <- calc_distance(Zul_fzg)
data_geo <- calc_distance(Geodaten)
# count occurences in each gemeinde
col_matches <- rep(0, nrow(data_geo))
for (i in 1:nrow(data_geo)) {
col_matches[i] <- sum(filtered_data$Gemeinde == data_geo$Gemeinde[i])
col_matches[i][col_matches[i] == 0] <- NA
}
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) # remove rows with 0 matches since they should not appear on the map
# save as new .csv
write.csv(filtered_data, file = "filtered_data.csv", na = "")
# saves cleaned file gemeinde
write.csv(data_geo, file = "gemeinden_clean.csv", na = "")
library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)
library(readr)
library(readxl)
library(tidyverse)
library(tidyr)
library(readr)
library(lubridate)
setwd("C:/Users/abhis/Documents/R/Case Study")
Geodaten$Breitengrad <- gsub(".{1}$","",Geodaten$Breitengrad)
Geodaten$Breitengrad <- as.numeric(gsub(",",".",Geodaten$Breitengrad))
#sollte zulassungsdatum auch considered werden? nein sonst zul_fzg merge geht nicht
Zulassungen$Zulassung <- ymd(Zulassungen$Zulassung)
#dresden important?
Zulassungen_selection <- Zulassungen %>%
rename("ID_Fahrzeug" = "IDNummer") %>%
rename("Gemeinde" = "Gemeinden")
Geodaten_selection$Breitengrad <- gsub(".{1}$","",Geodaten_selection$Breitengrad)
Geodaten_selection$Breitengrad <- as.numeric(gsub(",",".",Geodaten_selection$Breitengrad))
#not sure if appropriate, aber these were zugelassen in Dresden obwohl Fehler
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1)) %>%
merge(Geodaten, by = "Gemeinde") %>%
select(-c(X, X1))
# function to calculate distance between stuttgart and datapoint
calc_distance <- function(df){
distance <- rep(0, nrow(df))
# lat/lng stuttgart
lat_st = 48.7706 * pi / 180
lng_st = 9.18457 * pi / 180
R_earth = 6371 # radius earth [km]
# calc distance between stuttgart - point
# after haversine distance algorithm
for (i in 1:nrow(df)) {
lng1 <- df$Laengengrad[i] * pi / 180
lat1 <- df$Breitengrad[i] * pi / 180
delta_lng <- (lng_st - lng1)
delta_lat <- (lat_st - lat1)
var_a <- sin(delta_lat/2) * sin(delta_lat/2) + cos(lat_st) * cos(lat1) * sin(delta_lng/2) * sin(delta_lng/2)
var_c <- 2 * atan2(sqrt(var_a), sqrt(1 - var_a))
var_d <- R_earth * var_c # [km]
distance[i] <- round(var_d, digits = 2)
}
df <- cbind(df,distance)
return(df)
}
#method for filtered data and geo data.
filtered_data <- calc_distance(Zul_fzg)
data_geo <- calc_distance(Geodaten)
# count occurences in each gemeinde
col_matches <- rep(0, nrow(data_geo))
for (i in 1:nrow(data_geo)) {
col_matches[i] <- sum(filtered_data$Gemeinde == data_geo$Gemeinde[i])
col_matches[i][col_matches[i] == 0] <- NA
}
data_geo <- cbind(data_geo, col_matches) %>%
na.omit(col_matches) # remove rows with 0 matches since they should not appear on the map
# save as new .csv
write.csv(filtered_data, file = "filtered_data.csv", na = "")
# saves cleaned file gemeinde
write.csv(data_geo, file = "gemeinden_clean.csv", na = "")
View(data_geo)
data_geo <- data_geo %>%
select(-X1)
# saves cleaned file gemeinde
write.csv(data_geo, file = "gemeinden_clean.csv", na = "")
setwd("C:/Users/abhis/Documents/R/Case Study")
library(shiny)
library(leaflet)
library(dplyr)
library(ggplot2)
library(leaflet.extras)
library(DT)
ds <- read.csv("filtered_data.csv")
data_geo <- read.csv("gemeinden_clean.csv")
names(data_geo)[6] <- "Distanz"
names(data_geo)[7] <- "Anz_Fahrzeuge"
names(data_geo) <- c("No", "PLZ", "Gemeinde", "Laengengrad", "Breitengrad", "Distanz", "Anz_Fahrzeuge")
View(data_geo)
data_geo <- read.csv("gemeinden_clean.csv")
data_geo <- read.csv("gemeinden_clean.csv") %>%
select(-X1)
data_geo <- read.csv("gemeinden_clean.csv") %>%
select(-X.1)
names(data_geo)[6] <- "Distanz"
names(data_geo)[7] <- "Anz_Fahrzeuge"
names(data_geo) <- c("No", "PLZ", "Gemeinde", "Laengengrad", "Breitengrad", "Distanz", "Anz_Fahrzeuge")
Zul_fzg <- merge(komp_fzg_einzeil, Zulassungen_selection, by = "ID_Fahrzeug") %>%
select(-c(X, X1)) %>%
merge(Geodaten, by = "Gemeinde") %>%
select(-c(X, X1))
runApp()
data_geo <- read.csv("gemeinden_clean.csv")
runApp('Case Study Gaman/IDA_grp_10/shiny_app.R')
runApp('Case Study Gaman/IDA_grp_10/shiny_app.R')
